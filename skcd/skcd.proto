syntax = "proto3";

package interstellarpbskcd;

// cf gate_types.h
enum SkcdGateType {
    ZERO = 0;
    NOR = 1;
    AANB = 2;
    INVB = 3;
    NAAB = 4;
    INV = 5;
    XOR = 6;
    NAND = 7;
    AND = 8;
    XNOR = 9;
    BUF = 10;
    AONB = 11;
    BUFB = 12;
    NAOB = 13;
    OR = 14;
    ONE = 15;
  };

enum GateLayer {
  // All inputs are root(= 'msg' and/or 'rnd' and/or 'z')
  ROOT = 0;
  // One input is root, the other is the output from another gate
  INTERMEDIATE = 1;
  // All inputs are outputs from another gate
  // NOTE: this is never the case in pratice, but have this just in case
  SECOND = 2;
  // ZERO: currently a special case
  // no input, only one output: 0
  // ZERO,
  // INV: same as ZERO: currently a special case
  // one input: 'z', one output: 'pix[NNN]'
  // (only one of those in a circuit)
  // INV,
  // DO NOT USE in switch etc;
  // https://stackoverflow.com/questions/2102582/how-can-i-count-the-items-in-an-enum
  // GateLayer_MAX = SECOND,
};

/**
* INTERNAL/BACKEND ONLY
* This is an "helper struct" init in BlifParser, and passed around all the way
* to (Parallel)GarbledCircuit.
* It allows to avoid various loops on gates/labels to recompute the same
* things again and again.
*/
message CircuitData {
  uint32 gate_input_min = 1;
  uint32 gate_input_max = 2;
  uint32 gate_output_min = 3;
  uint32 gate_output_max = 4;

  repeated uint32 layer_count = 5;

  // map an 'input gate_id' to a number(of gate that has this input)
  // After init: input_gate_count.size() = gate_input_max + 1;
  // NOTE: the inputs are typically init from 0, so this vector is NOT sparse.
  // ie: typically the "max input0/1" is just a bit bigger than "number of
  // unique input0/1"
  repeated uint32 input_gate_count = 6;
}

/*
[BACKEND ONLY]
It is used to link using "circuit generation" and "garbling".

The fields SHOULD be about the same as the class BlifParser.
*/
message Skcd {

    uint32 n = 1;  // inputs number
    uint32 m = 2;  // outputs number
    uint32 q = 3;  // gates number

    // Vector of "label index"(except GT)
    repeated uint32 A = 4;   // gates first inputs
    repeated uint32 B = 5;   // gates second inputs
    repeated uint32 GO = 6;  // gates outputs
    repeated SkcdGateType GT = 7;  // gates types
    repeated uint32 O = 8;   // outputs

    CircuitData circuit_data = 9;

    map<string, uint32> config = 10;

}