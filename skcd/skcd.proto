syntax = "proto3";

package interstellarpbskcd;

// cf gate_types.h
enum SkcdGateType {
    ZERO = 0;
    NOR = 1;
    AANB = 2;
    INVB = 3;
    NAAB = 4;
    INV = 5;
    XOR = 6;
    NAND = 7;
    AND = 8;
    XNOR = 9;
    BUF = 10;
    AONB = 11;
    BUFB = 12;
    NAOB = 13;
    OR = 14;
    ONE = 15;
  };

enum GarblerInputsType {
  GARBLER_INPUTS_BUF = 0;
  GARBLER_INPUTS_SEVEN_SEGMENTS = 1;
  GARBLER_INPUTS_WATERMARK = 2;
};

enum EvaluatorInputsType {
  EVALUATOR_INPUTS_RND = 0;
};

message GarblerInputs {
  GarblerInputsType type = 1;
  uint32 length = 2;
}

message EvaluatorInputs {
  EvaluatorInputsType type = 1;
  uint32 length = 2;
}

// Only for display circuits
// We could alternatively use a map<> for added flexibility but those fields
// basically never change.
message DisplayConfig {
  uint32 width = 20;
  uint32 height = 21;
  // cf drawable::DigitSegmentsType
  uint32 segments_type = 22;
}

// IMPORTANT it MUST esentially match /lib_circuits/src/blif/skcd_config.h
message SkcdConfig {
  // INPUTS
  // Those are splitted into GARBLER:
  repeated GarblerInputs garbler_inputs = 1;
  // Then evaluator
  repeated EvaluatorInputs evaluator_inputs = 2;

  DisplayConfig display_config = 10;
}

message SkcdGate {
  SkcdGateType type = 1;
  // "a" and "b" are optional
  // eg a INV gate only has "a", etc
  string a = 2;
  string b = 3;
  // "o" SHOULD always be set
  string o = 4;
}

/*
[BACKEND ONLY]
It is used to link using "circuit generation" and "garbling".

The fields SHOULD be about the same as the class BlifParser.
*/
message Skcd {
    repeated SkcdGate gates = 1;
    repeated string outputs = 2;   // outputs
    // TODO NOTE: inputs(and possibly outputs too) COULD be deduced from SkcdConfig and the gates
    // themselves, but it is easier to map them directly b/c that way we avoid
    // having to mess converting "gate ID in .blif" with "gate ID in .skcd" and also in skcd_parser.rs
    repeated string inputs = 3;   // inputs

    SkcdConfig config = 15;
}