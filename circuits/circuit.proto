syntax = "proto3";

import "block.proto"; // for Block

package interstellarpbcircuits;

// RLE encoding
message VectConsecutiveEntry {
  int32 start =
      1; // ushort could be enough but for size1, but definitely not size2
  int32 length = 2;
}

// see msgpack serialization
// this is 4 vectors of block
message GarbledTables {
  repeated Block gt0 = 1;
  repeated Block gt1 = 2;
  repeated Block gt2 = 3;
  repeated Block gt3 = 4;
}

// This should be as close as possible from the RUNTIME structure
// = from the class with the same name in the SDK
message ParallelGarbledCircuit {
  // uint?
  uint32 n = 1;           // typically: 24
  uint32 m = 2;           // typically: 55440, 29500 for size1
  uint32 q = 3;           // typically: 29957
  uint32 r = 4;           // typically: 30043
  uint32 nbLayers = 5;
  uint32 nonXorCount = 6; // typically 386

  repeated uint32 layerCount = 7;
  repeated uint32 layerNonXORCount = 8;

  repeated Block input_labels = 9;   // n*2 inputLabels
  repeated Block output_labels = 10;  // m*2 outputlabels

  // WARNING: using custom GarbledGates drastically reduce the size of the raw
  //  PGC buffer BUT is causes the gzip/lzma compressed buffer to
  //  be BIGGER! (~1-3% bigger)
  // garbledGates:GarbledGates (required);
  // garbledGates:[ulong] (required);
  // GarbledGates3 garbledGates = 10;
  repeated uint64 garbledGates = 11;

  GarbledTables garbleTables = 12;

  // NOTE: no a vector of int !
  // outputs contains A LOT of consecutive values, so we use this to compress
  // eg: 55k outputs typically contains 1-2k "unique values", the rest is
  // consecutive
  // #ifdef OUTPUTS_ENCODE_NEW
  // repeated VectConsecutiveEntry outputs = 13;
  repeated uint32 outputs = 13;

  Block globalKey = 14;

  map<string, uint32> config = 15;
}
